package main

import (
//	"flag"
	"fmt"
	"log"
	"net"
	"strings"
	"time"
	"io/ioutil"
	"os"
	"gopkg.in/yaml.v2"
	pinger "github.com/raintank/go-pinger"
)

const Version = "0.01"

var (
	count     int
	timeout   time.Duration
	interval  time.Duration
	ipVersion string

	p *pinger.Pinger
)

type PingStats struct {
	Latency  []time.Duration
	Sent     int
	Received int
}

type Config struct {
        InfluxdbServer string
        InfluxDB string
        InfluxUsername string
        InfluxPassword string
        Ipv6Allowed bool
        PtpIpPing bool
        ProbeInterval int
        ProbeTimeout int
        ProbeCount int
        Hosts []string
}


func main() {
//	flag.IntVar(&count, "count", 5, "number of pings to sent to each host (sent concurrently)")
//	flag.DurationVar(&timeout, "timeout", time.Second*2, "timeout time before pings are assumed lost")
//	flag.DurationVar(&interval, "interval", time.Second*10, "frequency at which the pings should be sent to hosts.")
//	flag.StringVar(&ipVersion, "ipversion", "any", "ipversion to use. (v4|v6|any)")

//	flag.Parse()
//	if flag.NArg() == 0 {
//		log.Fatal("no hosts specified")
//	}
//	hosts := flag.Args()
	var err error
	var hosts []string
	proto := "all"
	if ipVersion == "v4" {
		proto = "ipv4"
	}
	if ipVersion == "v6" {
		proto = "ipv6"
	}
	p, err = pinger.NewPinger(proto, 1000)

	if err != nil {
		log.Fatal(err)
	}
	p.Start()

	var config Config
	config = startup(config)

	for i:= range(config.Hosts) {
		host = config.Hosts[i]
	}


	ticker := time.NewTicker(interval)
	for range ticker.C {
		for _, host := range hosts {
			log.Printf("pinging %s", host)
			go ping(host)
		}
	}
}

func startup(config Config) Config {
        /*
        Startup function, reads the config in and prints the version number
        */
        fmt.Printf("InfluxPing Version:%s\n\n", Version)

        if len(os.Args) <= 1 {
                log.Fatal("No Configuration file specified")
        }
        filename := os.Args[1]

        source, err := ioutil.ReadFile(filename)
        if err != nil {
                log.Fatal(err)
        }

        err = yaml.Unmarshal(source, &config)
        if err != nil {
                log.Fatal(err)
        }
        return config
}

func getConfigHosts(config Config) []net.IP {
        /*
        This function looks at the configuration we got from the Yml file
        does validation and DNS resolution of the hosts in the config file.
        Basically using the dns lookup to do validation
        */
        var hosts []net.IP

        for i := range(config.Hosts) {
                resovledip, err := net.LookupIP(config.Hosts[i])
                if err != nil {
                        fmt.Printf("Unable to resovle: %s\n", config.Hosts[i])
                } else if len(resovledip) != 0 {
                        hosts = append(hosts, resovledip[0])
                }
        }
        return hosts
}


func ResolveHost(host, ipversion string) (string, error) {
	addrs, err := net.LookupHost(host)
	if err != nil || len(addrs) < 1 {
		return "", fmt.Errorf("failed to resolve hostname to IP.")
	}

	for _, addr := range addrs {
		if ipversion == "any" {
			return addr, nil
		}

		if strings.Contains(addr, ":") || strings.Contains(addr, "%") {
			if ipversion == "v6" {
				return addr, nil
			}
		} else {
			if ipversion == "v4" {
				return addr, nil
			}
		}
	}

	return "", fmt.Errorf("failed to resolve hostname to valid IP.")
}

func ping(host string) {
	addr, err := ResolveHost(host, ipVersion)
	if err != nil {
		log.Println(err)
		return
	}
	stats, err := p.Ping(net.ParseIP(addr), count, timeout)
	if err != nil {
		log.Println(err)
		return
	}

	total := time.Duration(0)
	min := timeout
	max := time.Duration(0)
	for _, t := range stats.Latency {
		total += t
		if t < min {
			min = t
		}
		if t > max {
			max = t
		}
	}
	avg := time.Duration(0)
	if total > 0 {
		avg = total / time.Duration(stats.Received)
	}

	log.Printf("%s sent=%d  received=%d  avg=%s min=%s max=%s\n", host, stats.Sent, stats.Received, avg.String(), min.String(), max.String())
}

